function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState } from "react";
import { View } from "react-native";
import DurationScroll from "./DurationScroll";
import { generateStyles } from "./TimerPicker.styles";
const TimerPicker = /*#__PURE__*/forwardRef(({
  allowFontScaling = false,
  onDurationChange,
  initialHours = 0,
  initialMinutes = 0,
  initialSeconds = 0,
  hideHours = false,
  hideMinutes = false,
  hideSeconds = false,
  hoursPickerIsDisabled = false,
  minutesPickerIsDisabled = false,
  secondsPickerIsDisabled = false,
  hourLimit,
  minuteLimit,
  secondLimit,
  hourLabel,
  minuteLabel,
  secondLabel,
  padWithNItems = 1,
  disableInfiniteScroll = false,
  aggressivelyGetLatestDuration = false,
  use12HourPicker = false,
  amLabel = "am",
  pmLabel = "pm",
  LinearGradient,
  pickerContainerProps,
  pickerGradientOverlayProps,
  topPickerGradientOverlayProps,
  bottomPickerGradientOverlayProps,
  styles: customStyles
}, ref) => {
  const checkedPadWithNItems = padWithNItems >= 0 ? Math.round(padWithNItems) : 0;
  const styles = useMemo(() => generateStyles(customStyles, {
    padWithNItems: checkedPadWithNItems
  }), [checkedPadWithNItems, customStyles]);
  const [selectedHours, setSelectedHours] = useState(initialHours);
  const [selectedMinutes, setSelectedMinutes] = useState(initialMinutes);
  const [selectedSeconds, setSelectedSeconds] = useState(initialSeconds);
  useEffect(() => {
    onDurationChange === null || onDurationChange === void 0 || onDurationChange({
      hours: selectedHours,
      minutes: selectedMinutes,
      seconds: selectedSeconds
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedHours, selectedMinutes, selectedSeconds]);
  const hoursDurationScrollRef = useRef(null);
  const minutesDurationScrollRef = useRef(null);
  const secondsDurationScrollRef = useRef(null);
  useImperativeHandle(ref, () => {
    var _hoursDurationScrollR3, _minutesDurationScrol3, _secondsDurationScrol3;
    return {
      reset: options => {
        var _hoursDurationScrollR, _minutesDurationScrol, _secondsDurationScrol;
        setSelectedHours(initialHours);
        setSelectedMinutes(initialMinutes);
        setSelectedSeconds(initialSeconds);
        (_hoursDurationScrollR = hoursDurationScrollRef.current) === null || _hoursDurationScrollR === void 0 || _hoursDurationScrollR.reset(options);
        (_minutesDurationScrol = minutesDurationScrollRef.current) === null || _minutesDurationScrol === void 0 || _minutesDurationScrol.reset(options);
        (_secondsDurationScrol = secondsDurationScrollRef.current) === null || _secondsDurationScrol === void 0 || _secondsDurationScrol.reset(options);
      },
      setValue: (value, options) => {
        var _hoursDurationScrollR2, _minutesDurationScrol2, _secondsDurationScrol2;
        setSelectedHours(value.hours);
        setSelectedMinutes(value.minutes);
        setSelectedSeconds(value.seconds);
        (_hoursDurationScrollR2 = hoursDurationScrollRef.current) === null || _hoursDurationScrollR2 === void 0 || _hoursDurationScrollR2.setValue(value.hours, options);
        (_minutesDurationScrol2 = minutesDurationScrollRef.current) === null || _minutesDurationScrol2 === void 0 || _minutesDurationScrol2.setValue(value.minutes, options);
        (_secondsDurationScrol2 = secondsDurationScrollRef.current) === null || _secondsDurationScrol2 === void 0 || _secondsDurationScrol2.setValue(value.seconds, options);
      },
      latestDuration: {
        hours: (_hoursDurationScrollR3 = hoursDurationScrollRef.current) === null || _hoursDurationScrollR3 === void 0 ? void 0 : _hoursDurationScrollR3.latestDuration,
        minutes: (_minutesDurationScrol3 = minutesDurationScrollRef.current) === null || _minutesDurationScrol3 === void 0 ? void 0 : _minutesDurationScrol3.latestDuration,
        seconds: (_secondsDurationScrol3 = secondsDurationScrollRef.current) === null || _secondsDurationScrol3 === void 0 ? void 0 : _secondsDurationScrol3.latestDuration
      }
    };
  });
  return /*#__PURE__*/React.createElement(View, _extends({}, pickerContainerProps, {
    style: styles.pickerContainer,
    testID: "timer-picker"
  }), !hideHours ? /*#__PURE__*/React.createElement(DurationScroll, {
    ref: hoursDurationScrollRef,
    numberOfItems: 23,
    label: hourLabel ?? (!use12HourPicker ? "h" : undefined),
    isDisabled: hoursPickerIsDisabled,
    initialValue: initialHours,
    allowFontScaling: allowFontScaling,
    aggressivelyGetLatestDuration: aggressivelyGetLatestDuration,
    onDurationChange: setSelectedHours,
    pickerGradientOverlayProps: pickerGradientOverlayProps,
    topPickerGradientOverlayProps: topPickerGradientOverlayProps,
    bottomPickerGradientOverlayProps: bottomPickerGradientOverlayProps,
    disableInfiniteScroll: disableInfiniteScroll,
    padWithNItems: checkedPadWithNItems,
    limit: hourLimit,
    LinearGradient: LinearGradient,
    is12HourPicker: use12HourPicker,
    amLabel: amLabel,
    pmLabel: pmLabel,
    styles: styles,
    testID: "duration-scroll-hour"
  }) : null, !hideMinutes ? /*#__PURE__*/React.createElement(DurationScroll, {
    ref: minutesDurationScrollRef,
    numberOfItems: 59,
    label: minuteLabel ?? "m",
    isDisabled: minutesPickerIsDisabled,
    initialValue: initialMinutes,
    allowFontScaling: allowFontScaling,
    aggressivelyGetLatestDuration: aggressivelyGetLatestDuration,
    onDurationChange: setSelectedMinutes,
    padNumbersWithZero: true,
    pickerGradientOverlayProps: pickerGradientOverlayProps,
    topPickerGradientOverlayProps: topPickerGradientOverlayProps,
    bottomPickerGradientOverlayProps: bottomPickerGradientOverlayProps,
    disableInfiniteScroll: disableInfiniteScroll,
    padWithNItems: checkedPadWithNItems,
    limit: minuteLimit,
    LinearGradient: LinearGradient,
    styles: styles,
    testID: "duration-scroll-minute"
  }) : null, !hideSeconds ? /*#__PURE__*/React.createElement(DurationScroll, {
    ref: secondsDurationScrollRef,
    numberOfItems: 59,
    label: secondLabel ?? "s",
    isDisabled: secondsPickerIsDisabled,
    initialValue: initialSeconds,
    allowFontScaling: allowFontScaling,
    aggressivelyGetLatestDuration: aggressivelyGetLatestDuration,
    onDurationChange: setSelectedSeconds,
    padNumbersWithZero: true,
    pickerGradientOverlayProps: pickerGradientOverlayProps,
    topPickerGradientOverlayProps: topPickerGradientOverlayProps,
    bottomPickerGradientOverlayProps: bottomPickerGradientOverlayProps,
    disableInfiniteScroll: disableInfiniteScroll,
    padWithNItems: checkedPadWithNItems,
    limit: secondLimit,
    LinearGradient: LinearGradient,
    styles: styles,
    testID: "duration-scroll-second"
  }) : null);
});
export default /*#__PURE__*/React.memo(TimerPicker);
//# sourceMappingURL=index.js.map