{"version":3,"names":["React","forwardRef","useCallback","useEffect","useImperativeHandle","useRef","useState","View","Text","TouchableOpacity","TimerPicker","Modal","generateStyles","TimerPickerModal","visible","setIsVisible","onConfirm","onCancel","onDurationChange","closeOnOverlayPress","initialHours","initialMinutes","initialSeconds","hideHours","hideMinutes","hideSeconds","hoursPickerIsDisabled","minutesPickerIsDisabled","secondsPickerIsDisabled","hourLimit","minuteLimit","secondLimit","hourLabel","minuteLabel","secondLabel","padWithNItems","disableInfiniteScroll","allowFontScaling","use12HourPicker","amLabel","pmLabel","hideCancelButton","confirmButtonText","cancelButtonText","modalTitle","LinearGradient","modalProps","containerProps","contentContainerProps","pickerContainerProps","buttonContainerProps","buttonTouchableOpacityProps","modalTitleProps","pickerGradientOverlayProps","topPickerGradientOverlayProps","bottomPickerGradientOverlayProps","styles","customStyles","ref","timerPickerRef","selectedDuration","setSelectedDuration","hours","minutes","seconds","confirmedDuration","setConfirmedDuration","reset","options","_timerPickerRef$curre","initialDuration","current","hideModalHandler","confirmHandler","_timerPickerRef$curre2","_latestDuration$hours","_latestDuration$minut","_latestDuration$secon","latestDuration","newDuration","cancelHandler","durationChangeHandler","duration","_timerPickerRef$curre4","_timerPickerRef$curre5","_timerPickerRef$curre6","setValue","value","_timerPickerRef$curre3","createElement","_extends","isVisible","onOverlayPress","undefined","testID","style","container","contentContainer","aggressivelyGetLatestDuration","buttonContainer","onPress","button","cancelButton","confirmButton","memo"],"sources":["index.tsx"],"sourcesContent":["import React, {\n    MutableRefObject,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useImperativeHandle,\n    useRef,\n    useState,\n} from \"react\";\nimport { View, Text, TouchableOpacity } from \"react-native\";\n\nimport TimerPicker, { TimerPickerProps, TimerPickerRef } from \"./TimerPicker\";\nimport Modal from \"./Modal\";\n\nimport {\n    generateStyles,\n    CustomTimerPickerModalStyles,\n} from \"./TimerPickerModal.styles\";\n\nexport interface TimerPickerModalRef {\n    reset: (options?: { animated?: boolean }) => void;\n    setValue: (\n        value: {\n            hours: number;\n            minutes: number;\n            seconds: number;\n        },\n        options?: { animated?: boolean }\n    ) => void;\n    latestDuration: {\n        hours: MutableRefObject<number> | undefined;\n        minutes: MutableRefObject<number> | undefined;\n        seconds: MutableRefObject<number> | undefined;\n    };\n}\n\nexport interface TimerPickerModalProps extends TimerPickerProps {\n    visible: boolean;\n    setIsVisible: (isVisible: boolean) => void;\n    onConfirm: ({\n        hours,\n        minutes,\n        seconds,\n    }: {\n        hours: number;\n        minutes: number;\n        seconds: number;\n    }) => void;\n    onCancel?: () => void;\n    closeOnOverlayPress?: boolean;\n    hideCancelButton?: boolean;\n    confirmButtonText?: string;\n    cancelButtonText?: string;\n    modalTitle?: string;\n    modalProps?: React.ComponentProps<typeof Modal>;\n    containerProps?: React.ComponentProps<typeof View>;\n    contentContainerProps?: React.ComponentProps<typeof View>;\n    buttonContainerProps?: React.ComponentProps<typeof View>;\n    buttonTouchableOpacityProps?: React.ComponentProps<typeof TouchableOpacity>;\n    modalTitleProps?: React.ComponentProps<typeof Text>;\n    styles?: CustomTimerPickerModalStyles;\n}\n\nconst TimerPickerModal = forwardRef<TimerPickerModalRef, TimerPickerModalProps>(\n    (\n        {\n            visible,\n            setIsVisible,\n            onConfirm,\n            onCancel,\n            onDurationChange,\n            closeOnOverlayPress,\n            initialHours = 0,\n            initialMinutes = 0,\n            initialSeconds = 0,\n            hideHours = false,\n            hideMinutes = false,\n            hideSeconds = false,\n            hoursPickerIsDisabled = false,\n            minutesPickerIsDisabled = false,\n            secondsPickerIsDisabled = false,\n            hourLimit,\n            minuteLimit,\n            secondLimit,\n            hourLabel,\n            minuteLabel,\n            secondLabel,\n            padWithNItems = 1,\n            disableInfiniteScroll = false,\n            allowFontScaling = false,\n            use12HourPicker,\n            amLabel,\n            pmLabel,\n            hideCancelButton = false,\n            confirmButtonText = \"Confirm\",\n            cancelButtonText = \"Cancel\",\n            modalTitle,\n            LinearGradient,\n            modalProps,\n            containerProps,\n            contentContainerProps,\n            pickerContainerProps,\n            buttonContainerProps,\n            buttonTouchableOpacityProps,\n            modalTitleProps,\n            pickerGradientOverlayProps,\n            topPickerGradientOverlayProps,\n            bottomPickerGradientOverlayProps,\n            styles: customStyles,\n        },\n        ref\n    ): React.ReactElement => {\n        const styles = generateStyles(customStyles);\n\n        const timerPickerRef = useRef<TimerPickerRef>(null);\n\n        const [selectedDuration, setSelectedDuration] = useState({\n            hours: initialHours,\n            minutes: initialMinutes,\n            seconds: initialSeconds,\n        });\n        const [confirmedDuration, setConfirmedDuration] = useState({\n            hours: initialHours,\n            minutes: initialMinutes,\n            seconds: initialSeconds,\n        });\n\n        const reset = (options?: { animated?: boolean }) => {\n            const initialDuration = {\n                hours: initialHours,\n                minutes: initialMinutes,\n                seconds: initialSeconds,\n            };\n            setSelectedDuration(initialDuration);\n            setConfirmedDuration(initialDuration);\n            timerPickerRef.current?.reset(options);\n        };\n\n        // reset state if the initial times change\n        useEffect(() => {\n            reset();\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [initialHours, initialMinutes, initialSeconds]);\n\n        const hideModalHandler = () => {\n            setSelectedDuration({\n                hours: confirmedDuration.hours,\n                minutes: confirmedDuration.minutes,\n                seconds: confirmedDuration.seconds,\n            });\n            setIsVisible(false);\n        };\n\n        const confirmHandler = () => {\n            const latestDuration = timerPickerRef.current?.latestDuration;\n            const newDuration = {\n                hours: latestDuration?.hours?.current ?? selectedDuration.hours,\n                minutes:\n                    latestDuration?.minutes?.current ??\n                    selectedDuration.minutes,\n                seconds:\n                    latestDuration?.seconds?.current ??\n                    selectedDuration.seconds,\n            };\n            setConfirmedDuration(newDuration);\n            onConfirm(newDuration);\n        };\n\n        const cancelHandler = () => {\n            setIsVisible(false);\n            setSelectedDuration(confirmedDuration);\n            onCancel?.();\n        };\n\n        // wrapped in useCallback to avoid unnecessary re-renders of TimerPicker\n        const durationChangeHandler = useCallback(\n            (duration: { hours: number; minutes: number; seconds: number }) => {\n                setSelectedDuration(duration);\n                onDurationChange?.(duration);\n            },\n            [onDurationChange]\n        );\n\n        useImperativeHandle(ref, () => ({\n            reset,\n            setValue: (value, options) => {\n                setSelectedDuration(value);\n                setConfirmedDuration(value);\n                timerPickerRef.current?.setValue(value, options);\n            },\n            latestDuration: {\n                hours: timerPickerRef.current?.latestDuration?.hours,\n                minutes: timerPickerRef.current?.latestDuration?.minutes,\n                seconds: timerPickerRef.current?.latestDuration?.seconds,\n            },\n        }));\n\n        return (\n            <Modal\n                isVisible={visible}\n                onOverlayPress={\n                    closeOnOverlayPress ? hideModalHandler : undefined\n                }\n                {...modalProps}\n                testID=\"timer-picker-modal\">\n                <View {...containerProps} style={styles.container}>\n                    <View\n                        {...contentContainerProps}\n                        style={styles.contentContainer}>\n                        {modalTitle ? (\n                            <Text\n                                {...modalTitleProps}\n                                style={styles.modalTitle}>\n                                {modalTitle}\n                            </Text>\n                        ) : null}\n                        <TimerPicker\n                            ref={timerPickerRef}\n                            onDurationChange={durationChangeHandler}\n                            initialHours={confirmedDuration.hours}\n                            initialMinutes={confirmedDuration.minutes}\n                            initialSeconds={confirmedDuration.seconds}\n                            aggressivelyGetLatestDuration={true}\n                            hideHours={hideHours}\n                            hideMinutes={hideMinutes}\n                            hideSeconds={hideSeconds}\n                            hoursPickerIsDisabled={hoursPickerIsDisabled}\n                            minutesPickerIsDisabled={minutesPickerIsDisabled}\n                            secondsPickerIsDisabled={secondsPickerIsDisabled}\n                            hourLimit={hourLimit}\n                            minuteLimit={minuteLimit}\n                            secondLimit={secondLimit}\n                            hourLabel={hourLabel}\n                            minuteLabel={minuteLabel}\n                            secondLabel={secondLabel}\n                            padWithNItems={padWithNItems}\n                            disableInfiniteScroll={disableInfiniteScroll}\n                            allowFontScaling={allowFontScaling}\n                            use12HourPicker={use12HourPicker}\n                            amLabel={amLabel}\n                            pmLabel={pmLabel}\n                            LinearGradient={LinearGradient}\n                            pickerContainerProps={pickerContainerProps}\n                            pickerGradientOverlayProps={\n                                pickerGradientOverlayProps\n                            }\n                            topPickerGradientOverlayProps={\n                                topPickerGradientOverlayProps\n                            }\n                            bottomPickerGradientOverlayProps={\n                                bottomPickerGradientOverlayProps\n                            }\n                            styles={customStyles}\n                        />\n                        <View\n                            {...buttonContainerProps}\n                            style={styles.buttonContainer}>\n                            {!hideCancelButton ? (\n                                <TouchableOpacity\n                                    onPress={cancelHandler}\n                                    {...buttonTouchableOpacityProps}>\n                                    <Text\n                                        style={[\n                                            styles.button,\n                                            styles.cancelButton,\n                                        ]}>\n                                        {cancelButtonText}\n                                    </Text>\n                                </TouchableOpacity>\n                            ) : null}\n                            <TouchableOpacity\n                                onPress={confirmHandler}\n                                {...buttonTouchableOpacityProps}>\n                                <Text\n                                    style={[\n                                        styles.button,\n                                        styles.confirmButton,\n                                    ]}>\n                                    {confirmButtonText}\n                                </Text>\n                            </TouchableOpacity>\n                        </View>\n                    </View>\n                </View>\n            </Modal>\n        );\n    }\n);\n\nexport default React.memo(TimerPickerModal);\n"],"mappings":";AAAA,OAAOA,KAAK,IAERC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,mBAAmB,EACnBC,MAAM,EACNC,QAAQ,QACL,OAAO;AACd,SAASC,IAAI,EAAEC,IAAI,EAAEC,gBAAgB,QAAQ,cAAc;AAE3D,OAAOC,WAAW,MAA4C,eAAe;AAC7E,OAAOC,KAAK,MAAM,SAAS;AAE3B,SACIC,cAAc,QAEX,2BAA2B;AA8ClC,MAAMC,gBAAgB,gBAAGZ,UAAU,CAC/B,CACI;EACIa,OAAO;EACPC,YAAY;EACZC,SAAS;EACTC,QAAQ;EACRC,gBAAgB;EAChBC,mBAAmB;EACnBC,YAAY,GAAG,CAAC;EAChBC,cAAc,GAAG,CAAC;EAClBC,cAAc,GAAG,CAAC;EAClBC,SAAS,GAAG,KAAK;EACjBC,WAAW,GAAG,KAAK;EACnBC,WAAW,GAAG,KAAK;EACnBC,qBAAqB,GAAG,KAAK;EAC7BC,uBAAuB,GAAG,KAAK;EAC/BC,uBAAuB,GAAG,KAAK;EAC/BC,SAAS;EACTC,WAAW;EACXC,WAAW;EACXC,SAAS;EACTC,WAAW;EACXC,WAAW;EACXC,aAAa,GAAG,CAAC;EACjBC,qBAAqB,GAAG,KAAK;EAC7BC,gBAAgB,GAAG,KAAK;EACxBC,eAAe;EACfC,OAAO;EACPC,OAAO;EACPC,gBAAgB,GAAG,KAAK;EACxBC,iBAAiB,GAAG,SAAS;EAC7BC,gBAAgB,GAAG,QAAQ;EAC3BC,UAAU;EACVC,cAAc;EACdC,UAAU;EACVC,cAAc;EACdC,qBAAqB;EACrBC,oBAAoB;EACpBC,oBAAoB;EACpBC,2BAA2B;EAC3BC,eAAe;EACfC,0BAA0B;EAC1BC,6BAA6B;EAC7BC,gCAAgC;EAChCC,MAAM,EAAEC;AACZ,CAAC,EACDC,GAAG,KACkB;EACrB,MAAMF,MAAM,GAAG5C,cAAc,CAAC6C,YAAY,CAAC;EAE3C,MAAME,cAAc,GAAGtD,MAAM,CAAiB,IAAI,CAAC;EAEnD,MAAM,CAACuD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvD,QAAQ,CAAC;IACrDwD,KAAK,EAAE1C,YAAY;IACnB2C,OAAO,EAAE1C,cAAc;IACvB2C,OAAO,EAAE1C;EACb,CAAC,CAAC;EACF,MAAM,CAAC2C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5D,QAAQ,CAAC;IACvDwD,KAAK,EAAE1C,YAAY;IACnB2C,OAAO,EAAE1C,cAAc;IACvB2C,OAAO,EAAE1C;EACb,CAAC,CAAC;EAEF,MAAM6C,KAAK,GAAIC,OAAgC,IAAK;IAAA,IAAAC,qBAAA;IAChD,MAAMC,eAAe,GAAG;MACpBR,KAAK,EAAE1C,YAAY;MACnB2C,OAAO,EAAE1C,cAAc;MACvB2C,OAAO,EAAE1C;IACb,CAAC;IACDuC,mBAAmB,CAACS,eAAe,CAAC;IACpCJ,oBAAoB,CAACI,eAAe,CAAC;IACrC,CAAAD,qBAAA,GAAAV,cAAc,CAACY,OAAO,cAAAF,qBAAA,eAAtBA,qBAAA,CAAwBF,KAAK,CAACC,OAAO,CAAC;EAC1C,CAAC;;EAED;EACAjE,SAAS,CAAC,MAAM;IACZgE,KAAK,CAAC,CAAC;IACP;EACJ,CAAC,EAAE,CAAC/C,YAAY,EAAEC,cAAc,EAAEC,cAAc,CAAC,CAAC;EAElD,MAAMkD,gBAAgB,GAAGA,CAAA,KAAM;IAC3BX,mBAAmB,CAAC;MAChBC,KAAK,EAAEG,iBAAiB,CAACH,KAAK;MAC9BC,OAAO,EAAEE,iBAAiB,CAACF,OAAO;MAClCC,OAAO,EAAEC,iBAAiB,CAACD;IAC/B,CAAC,CAAC;IACFjD,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAM0D,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAC,sBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;IACzB,MAAMC,cAAc,IAAAJ,sBAAA,GAAGf,cAAc,CAACY,OAAO,cAAAG,sBAAA,uBAAtBA,sBAAA,CAAwBI,cAAc;IAC7D,MAAMC,WAAW,GAAG;MAChBjB,KAAK,EAAE,CAAAgB,cAAc,aAAdA,cAAc,gBAAAH,qBAAA,GAAdG,cAAc,CAAEhB,KAAK,cAAAa,qBAAA,uBAArBA,qBAAA,CAAuBJ,OAAO,KAAIX,gBAAgB,CAACE,KAAK;MAC/DC,OAAO,EACH,CAAAe,cAAc,aAAdA,cAAc,gBAAAF,qBAAA,GAAdE,cAAc,CAAEf,OAAO,cAAAa,qBAAA,uBAAvBA,qBAAA,CAAyBL,OAAO,KAChCX,gBAAgB,CAACG,OAAO;MAC5BC,OAAO,EACH,CAAAc,cAAc,aAAdA,cAAc,gBAAAD,qBAAA,GAAdC,cAAc,CAAEd,OAAO,cAAAa,qBAAA,uBAAvBA,qBAAA,CAAyBN,OAAO,KAChCX,gBAAgB,CAACI;IACzB,CAAC;IACDE,oBAAoB,CAACa,WAAW,CAAC;IACjC/D,SAAS,CAAC+D,WAAW,CAAC;EAC1B,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACxBjE,YAAY,CAAC,KAAK,CAAC;IACnB8C,mBAAmB,CAACI,iBAAiB,CAAC;IACtChD,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAG,CAAC;EAChB,CAAC;;EAED;EACA,MAAMgE,qBAAqB,GAAG/E,WAAW,CACpCgF,QAA6D,IAAK;IAC/DrB,mBAAmB,CAACqB,QAAQ,CAAC;IAC7BhE,gBAAgB,aAAhBA,gBAAgB,eAAhBA,gBAAgB,CAAGgE,QAAQ,CAAC;EAChC,CAAC,EACD,CAAChE,gBAAgB,CACrB,CAAC;EAEDd,mBAAmB,CAACsD,GAAG,EAAE;IAAA,IAAAyB,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IAAA,OAAO;MAC5BlB,KAAK;MACLmB,QAAQ,EAAEA,CAACC,KAAK,EAAEnB,OAAO,KAAK;QAAA,IAAAoB,sBAAA;QAC1B3B,mBAAmB,CAAC0B,KAAK,CAAC;QAC1BrB,oBAAoB,CAACqB,KAAK,CAAC;QAC3B,CAAAC,sBAAA,GAAA7B,cAAc,CAACY,OAAO,cAAAiB,sBAAA,eAAtBA,sBAAA,CAAwBF,QAAQ,CAACC,KAAK,EAAEnB,OAAO,CAAC;MACpD,CAAC;MACDU,cAAc,EAAE;QACZhB,KAAK,GAAAqB,sBAAA,GAAExB,cAAc,CAACY,OAAO,cAAAY,sBAAA,gBAAAA,sBAAA,GAAtBA,sBAAA,CAAwBL,cAAc,cAAAK,sBAAA,uBAAtCA,sBAAA,CAAwCrB,KAAK;QACpDC,OAAO,GAAAqB,sBAAA,GAAEzB,cAAc,CAACY,OAAO,cAAAa,sBAAA,gBAAAA,sBAAA,GAAtBA,sBAAA,CAAwBN,cAAc,cAAAM,sBAAA,uBAAtCA,sBAAA,CAAwCrB,OAAO;QACxDC,OAAO,GAAAqB,sBAAA,GAAE1B,cAAc,CAACY,OAAO,cAAAc,sBAAA,gBAAAA,sBAAA,GAAtBA,sBAAA,CAAwBP,cAAc,cAAAO,sBAAA,uBAAtCA,sBAAA,CAAwCrB;MACrD;IACJ,CAAC;EAAA,CAAC,CAAC;EAEH,oBACIhE,KAAA,CAAAyF,aAAA,CAAC9E,KAAK,EAAA+E,QAAA;IACFC,SAAS,EAAE7E,OAAQ;IACnB8E,cAAc,EACVzE,mBAAmB,GAAGqD,gBAAgB,GAAGqB;EAC5C,GACG/C,UAAU;IACdgD,MAAM,EAAC;EAAoB,iBAC3B9F,KAAA,CAAAyF,aAAA,CAAClF,IAAI,EAAAmF,QAAA,KAAK3C,cAAc;IAAEgD,KAAK,EAAEvC,MAAM,CAACwC;EAAU,iBAC9ChG,KAAA,CAAAyF,aAAA,CAAClF,IAAI,EAAAmF,QAAA,KACG1C,qBAAqB;IACzB+C,KAAK,EAAEvC,MAAM,CAACyC;EAAiB,IAC9BrD,UAAU,gBACP5C,KAAA,CAAAyF,aAAA,CAACjF,IAAI,EAAAkF,QAAA,KACGtC,eAAe;IACnB2C,KAAK,EAAEvC,MAAM,CAACZ;EAAW,IACxBA,UACC,CAAC,GACP,IAAI,eACR5C,KAAA,CAAAyF,aAAA,CAAC/E,WAAW;IACRgD,GAAG,EAAEC,cAAe;IACpBzC,gBAAgB,EAAE+D,qBAAsB;IACxC7D,YAAY,EAAE6C,iBAAiB,CAACH,KAAM;IACtCzC,cAAc,EAAE4C,iBAAiB,CAACF,OAAQ;IAC1CzC,cAAc,EAAE2C,iBAAiB,CAACD,OAAQ;IAC1CkC,6BAA6B,EAAE,IAAK;IACpC3E,SAAS,EAAEA,SAAU;IACrBC,WAAW,EAAEA,WAAY;IACzBC,WAAW,EAAEA,WAAY;IACzBC,qBAAqB,EAAEA,qBAAsB;IAC7CC,uBAAuB,EAAEA,uBAAwB;IACjDC,uBAAuB,EAAEA,uBAAwB;IACjDC,SAAS,EAAEA,SAAU;IACrBC,WAAW,EAAEA,WAAY;IACzBC,WAAW,EAAEA,WAAY;IACzBC,SAAS,EAAEA,SAAU;IACrBC,WAAW,EAAEA,WAAY;IACzBC,WAAW,EAAEA,WAAY;IACzBC,aAAa,EAAEA,aAAc;IAC7BC,qBAAqB,EAAEA,qBAAsB;IAC7CC,gBAAgB,EAAEA,gBAAiB;IACnCC,eAAe,EAAEA,eAAgB;IACjCC,OAAO,EAAEA,OAAQ;IACjBC,OAAO,EAAEA,OAAQ;IACjBK,cAAc,EAAEA,cAAe;IAC/BI,oBAAoB,EAAEA,oBAAqB;IAC3CI,0BAA0B,EACtBA,0BACH;IACDC,6BAA6B,EACzBA,6BACH;IACDC,gCAAgC,EAC5BA,gCACH;IACDC,MAAM,EAAEC;EAAa,CACxB,CAAC,eACFzD,KAAA,CAAAyF,aAAA,CAAClF,IAAI,EAAAmF,QAAA,KACGxC,oBAAoB;IACxB6C,KAAK,EAAEvC,MAAM,CAAC2C;EAAgB,IAC7B,CAAC1D,gBAAgB,gBACdzC,KAAA,CAAAyF,aAAA,CAAChF,gBAAgB,EAAAiF,QAAA;IACbU,OAAO,EAAEpB;EAAc,GACnB7B,2BAA2B,gBAC/BnD,KAAA,CAAAyF,aAAA,CAACjF,IAAI;IACDuF,KAAK,EAAE,CACHvC,MAAM,CAAC6C,MAAM,EACb7C,MAAM,CAAC8C,YAAY;EACrB,GACD3D,gBACC,CACQ,CAAC,GACnB,IAAI,eACR3C,KAAA,CAAAyF,aAAA,CAAChF,gBAAgB,EAAAiF,QAAA;IACbU,OAAO,EAAE3B;EAAe,GACpBtB,2BAA2B,gBAC/BnD,KAAA,CAAAyF,aAAA,CAACjF,IAAI;IACDuF,KAAK,EAAE,CACHvC,MAAM,CAAC6C,MAAM,EACb7C,MAAM,CAAC+C,aAAa;EACtB,GACD7D,iBACC,CACQ,CAChB,CACJ,CACJ,CACH,CAAC;AAEhB,CACJ,CAAC;AAED,4BAAe1C,KAAK,CAACwG,IAAI,CAAC3F,gBAAgB,CAAC"}