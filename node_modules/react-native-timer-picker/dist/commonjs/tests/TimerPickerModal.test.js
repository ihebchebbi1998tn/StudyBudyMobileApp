"use strict";

var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _components = _interopRequireDefault(require("../components"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
describe("TimerPickerModal", () => {
  const mockOnConfirm = jest.fn();
  const mockOnCancel = jest.fn();
  const defaultProps = {
    visible: true,
    setIsVisible: jest.fn(),
    onConfirm: mockOnConfirm,
    onCancel: mockOnCancel
  };
  it("renders without crashing", () => {
    const {
      getByTestId
    } = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_components.default, defaultProps));
    const component = getByTestId("timer-picker-modal");
    expect(component).toBeDefined();
  });
  it("calls onConfirm when Confirm button is pressed", () => {
    const {
      getByText
    } = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_components.default, defaultProps));
    const confirmButton = getByText("Confirm");
    _reactNative.fireEvent.press(confirmButton);
    expect(mockOnConfirm).toHaveBeenCalled();
  });
  it("calls onCancel when Cancel button is pressed", () => {
    const {
      getByText
    } = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_components.default, defaultProps));
    const cancelButton = getByText("Cancel");
    _reactNative.fireEvent.press(cancelButton);
    expect(mockOnCancel).toHaveBeenCalled();
  });
  it("hides the modal when Cancel button is pressed", () => {
    const setIsVisibleMock = jest.fn();
    const {
      getByText
    } = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_components.default, _extends({}, defaultProps, {
      setIsVisible: setIsVisibleMock
    })));
    const cancelButton = getByText("Cancel");
    _reactNative.fireEvent.press(cancelButton);
    expect(setIsVisibleMock).toHaveBeenCalledWith(false);
  });
  it("hides the modal when overlay is pressed", () => {
    const setIsVisibleMock = jest.fn();
    const {
      getByTestId
    } = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_components.default, _extends({}, defaultProps, {
      setIsVisible: setIsVisibleMock,
      closeOnOverlayPress: true
    })));
    const overlay = getByTestId("modal-backdrop");
    _reactNative.fireEvent.press(overlay);
    expect(setIsVisibleMock).toHaveBeenCalledWith(false);
  });
  it("calls onConfirm with selected duration when Confirm button is pressed", () => {
    const {
      getByText
    } = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_components.default, defaultProps));
    // Select duration in TimerPicker, assuming its interaction is tested separately
    const confirmButton = getByText("Confirm");
    _reactNative.fireEvent.press(confirmButton);
    expect(mockOnConfirm).toHaveBeenCalledWith(expect.objectContaining({}));
  });
});
//# sourceMappingURL=TimerPickerModal.test.js.map