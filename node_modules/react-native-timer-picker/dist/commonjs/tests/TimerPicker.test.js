"use strict";

var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _TimerPicker = _interopRequireDefault(require("../components/TimerPicker"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
describe("TimerPicker", () => {
  it("renders without crashing", () => {
    const {
      getByTestId
    } = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_TimerPicker.default, null));
    const component = getByTestId("timer-picker");
    expect(component).toBeDefined();
  });
  it("renders without crashing with negative padWithNItems", () => {
    const {
      getByTestId
    } = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_TimerPicker.default, {
      padWithNItems: -1
    }));
    const component = getByTestId("timer-picker");
    expect(component).toBeDefined();
  });
  it("hides minutes and seconds when respective hide props are provided", () => {
    const {
      queryByTestId
    } = (0, _reactNative.render)( /*#__PURE__*/_react.default.createElement(_TimerPicker.default, {
      hideMinutes: true,
      hideSeconds: true
    }));
    const minutePicker = queryByTestId("duration-scroll-minute");
    const secondPicker = queryByTestId("duration-scroll-second");
    expect(minutePicker).toBeNull();
    expect(secondPicker).toBeNull();
  });
});
//# sourceMappingURL=TimerPicker.test.js.map