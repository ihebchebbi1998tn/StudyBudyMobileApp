{"_id":"valid-url","_rev":"48-23a57cc524c126a1491de40cf597dbab","name":"valid-url","description":"URI validation functions","dist-tags":{"latest":"1.0.9"},"versions":{"1.0.1":{"name":"valid-url","description":"URI validation functions","keywords":["url","validation","check","checker","pattern"],"version":"1.0.1","repository":{"url":"git://github.com/ogt/valid-url.git"},"main":"index.js","scripts":{"test":"make test"},"dependencies":{},"devDependencies":{"tap":"~0.4.3","jshint":"~2.1.4","assert":"*","vows":"*"},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nReplicates the functionality of  http://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm\n (http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git )\ninto a nodejs module.\n\n#Description\n\n## Installation \n\n *fork it to install  \n *TODO: need add to npm\n\n## Usage\n \n `\n var validUrl = require('validUrl');\n `  \n\n## Methods\n\n `\n is_uri(value)\n `  \n **accepts** value as string to be checked as any protocol url  \n **returns** undefined if is not url, returns RFC 3986 url if valid\n\n `\n is_http_uri(value, allowHttps)\n `  \n **accepts** *value* as string to be checked as HTTP url, *allowHttps* as boolean to include https urls *(optional)*  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n\n `\n is_https_uri(value)\n `  \n **accepts** value as string to be checked as HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n \n `\n is_web_uri(value)\n `  \n **accepts** value as string to be checked as HTTP or HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n","readmeFilename":"README.md","_id":"valid-url@1.0.1","dist":{"shasum":"d3ee8dd26751f3cc9f81e9d880b518f3fcf1381e","tarball":"https://registry.npmjs.org/valid-url/-/valid-url-1.0.1.tgz","integrity":"sha512-r71l70KHfqqO1zs+pgPfv0KagskIbDQ5KAymjhSj2tMlc+qhYMVNItt1zk6ldwIHuXjFc6Ef2dYS3GtvDwAd6w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDx+9DnW42OmfUNqCg5N9/DphHI5+GFqFm9/P7CmAKAFAiB3NVH4pRuikhHusISrl4BxXWrWYI/ROVx2VNH8YdbtRA=="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"odysseas","email":"odysseas@tsatalos.com"},"maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"}],"directories":{}},"1.0.2":{"name":"valid-url","description":"URI validation functions","keywords":["url","validation","check","checker","pattern"],"version":"1.0.2","repository":{"url":"git://github.com/ogt/valid-url.git"},"main":"index.js","scripts":{"test":"make test"},"dependencies":{},"devDependencies":{"tap":"~0.4.3","jshint":"~2.1.4","assert":"*","vows":"*"},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nReplicates the functionality of  http://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm\n (http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git )\ninto a nodejs module.\n\n#Description\n\n## Installation \n\n *fork it to install  \n *TODO: need add to npm\n\n## Usage\n \n `\n var validUrl = require('valid-url');\n `  \n\n## Methods\n\n `\n is_uri(value)\n `  \n **accepts** value as string to be checked as any protocol url  \n **returns** undefined if is not url, returns RFC 3986 url if valid\n\n `\n is_http_uri(value, allowHttps)\n `  \n **accepts** *value* as string to be checked as HTTP url, *allowHttps* as boolean to include https urls *(optional)*  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n\n `\n is_https_uri(value)\n `  \n **accepts** value as string to be checked as HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n \n `\n is_web_uri(value)\n `  \n **accepts** value as string to be checked as HTTP or HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n","readmeFilename":"README.md","_id":"valid-url@1.0.2","dist":{"shasum":"aa461028df29eb3e0ba7b77e95faece16f90dc53","tarball":"https://registry.npmjs.org/valid-url/-/valid-url-1.0.2.tgz","integrity":"sha512-1X/V6zlTGFRnzvxMlX0HmcgWueZ2oISon/AZJMo8+Cx8VlrjJg71VpaEsOjF7sKw70/n/ze7LvWy+3I9c/gScA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCGl7V/OJgIEZc6CM+BKnMxRu98Rw7/ojv6Vp9/5ATN/QIgTbOqxGhBJWQ+3DzP9daSTk3iXBGnv0luYdlvYZEJ+Ts="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"odysseas","email":"odysseas@tsatalos.com"},"maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"},{"name":"sagens","email":"zholudev.s@gmail.com"}],"directories":{}},"1.0.3":{"name":"valid-url","description":"URI validation functions","keywords":["url","validation","check","checker","pattern"],"version":"1.0.3","repository":{"url":"git://github.com/ogt/valid-url.git"},"main":"index.js","scripts":{"test":"make test"},"dependencies":{},"devDependencies":{"tap":"~0.4.3","jshint":"~2.1.4","assert":"*","vows":"*"},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nCommon url validation methods \n```\n    var validUrl = require('valid-url');\n  \n    if (validUrl.isUri(suspect)){\n        console.log('Looks like an URI');\n    } else {\n        console.log('Not a URI');\n    }\n```\n\nReplicates the functionality of Richard Sonnen <sonnen@richardsonnen.com> perl module :\nhttp://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm [full code here](http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git)\ninto a nodejs module. Initially translated practically line by line from perl. Subsequently rewritten to leverage [url](http://nodejs.org/api/url.html).\nIt passes all the original tests.\n\n## Description\n\n(copied from original perl module)\n\nThis module collects common URI validation routines to make input validation, and untainting easier and more readable.\nAll functions return an untainted value if the test passes, and undef if it fails. This means that you should always check for a defined status explicitly. Don't assume the return will be true.\nThe value to test is always the first (and often only) argument.\nThere are a number of other URI validation modules out there as well (see below.) This one focuses on being fast, lightweight, and relatively 'real-world'. i.e. it's good if you want to check user input, and don't need to parse out the URI/URL into chunks.\nRight now the module focuses on HTTP URIs, since they're arguably the most common. If you have a specialized scheme you'd like to have supported, let me know.\n\n## Installation \n\n```\nnpm install valid-url\n```\n\n## Methods\n\n `\n isUri(value)\n `  \n **accepts** value as string to be checked as any protocol url  \n **returns** undefined if is not url, returns RFC 3986 url if valid\n\n `\n isHttpUri(value, allowHttps)\n `  \n **accepts** *value* as string to be checked as HTTP url, *allowHttps* as boolean to include https urls *(optional)*  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n\n `\n isHttpsUri(value)\n `  \n **accepts** value as string to be checked as HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n \n `\n isWebUri(value)\n `  \n **accepts** value as string to be checked as HTTP or HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n","readmeFilename":"README.md","_id":"valid-url@1.0.3","dist":{"shasum":"5ea80112dde3fdecf1be23d323f4ce2dc44c0fc2","tarball":"https://registry.npmjs.org/valid-url/-/valid-url-1.0.3.tgz","integrity":"sha512-KU7xyBP4NW3oMLD6Ms+8+0OQ8LNexjI/LMHVbTLJ3KAQFpmBARVNhSZ4rohjHsC5NbaAg8IxLC+/zBRAyufC2g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDwwpSmwGCFJBt7v8Gx/A9dWivwrRYMgbuzMkF/ru7CXgIgGyk9pnclrQcZWyJcTxELRgHyZ9Fsuf0fQDWWyrTgxSY="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"odysseas","email":"odysseas@tsatalos.com"},"maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"},{"name":"sagens","email":"zholudev.s@gmail.com"}],"directories":{}},"1.0.4":{"name":"valid-url","description":"URI validation functions","keywords":["url","validation","check","checker","pattern"],"version":"1.0.4","repository":{"url":"git://github.com/ogt/valid-url.git"},"main":"index.js","scripts":{"test":"make test"},"dependencies":{},"devDependencies":{"tap":"~0.4.3","jshint":"~2.1.4","assert":"*","vows":"*"},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nCommon url validation methods \n```\n    var validUrl = require('valid-url');\n  \n    if (validUrl.isUri(suspect)){\n        console.log('Looks like an URI');\n    } else {\n        console.log('Not a URI');\n    }\n```\n\nReplicates the functionality of Richard Sonnen <sonnen@richardsonnen.com> perl module :\nhttp://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm [full code here](http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git)\ninto a nodejs module. Initially translated practically line by line from perl. Subsequently rewritten to leverage [url](http://nodejs.org/api/url.html).\nIt passes all the original tests.\n\n## Description\n\n(copied from original perl module)\n\n> This module collects common URI validation routines to make input validation, and untainting easier and more readable.\n> All functions return an untainted value if the test passes, and undef if it fails. This means that you should always check for a defined status explicitly. Don't assume the return will be true.\n> The value to test is always the first (and often only) argument.\n> There are a number of other URI validation modules out there as well (see below.) This one focuses on being fast, lightweight, and relatively 'real-world'. i.e. it's good if you want to check user input, and don't need to parse out the URI/URL into chunks.\n> Right now the module focuses on HTTP URIs, since they're arguably the most common. If you have a specialized scheme you'd like to have supported, let me know.\n\n## Installation \n\n```\nnpm install valid-url\n```\n\n## Methods\n\n `\n isUri(value)\n `  \n **accepts** value as string to be checked as any protocol url  \n **returns** undefined if is not url, returns RFC 3986 url if valid\n\n `\n isHttpUri(value, allowHttps)\n `  \n **accepts** *value* as string to be checked as HTTP url, *allowHttps* as boolean to include https urls *(optional)*  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n\n `\n isHttpsUri(value)\n `  \n **accepts** value as string to be checked as HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n \n `\n isWebUri(value)\n `  \n **accepts** value as string to be checked as HTTP or HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n","readmeFilename":"README.md","_id":"valid-url@1.0.4","dist":{"shasum":"aebb4fd14ce71686f7d155cf6df41589e0eff975","tarball":"https://registry.npmjs.org/valid-url/-/valid-url-1.0.4.tgz","integrity":"sha512-pF5vn95caPR0wH+kRB+qIwW8rOZNsl45pCxt29ar+0lI9wguHIzXSqL/Gen51/rxaEhdhUWsYbAJmaObnC1VyQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDzSbf6OvXC3mJgrldshDLXG6kqYyb4XEjp7GeAahd1gAIgJwWj20fmPnQsDmplRjuY3i3ib7sDsc17uEcoBZ3RZz0="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"odysseas","email":"odysseas@tsatalos.com"},"maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"},{"name":"sagens","email":"zholudev.s@gmail.com"}],"directories":{}},"1.0.5":{"name":"valid-url","description":"URI validation functions","keywords":["url","validation","check","checker","pattern"],"version":"1.0.5","repository":{"url":"git://github.com/ogt/valid-url.git"},"main":"index.js","scripts":{"test":"make test"},"dependencies":{},"devDependencies":{"tap":"~0.4.3","jshint":"~2.1.4","assert":"*","vows":"*"},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nCommon url validation methods \n```\n    var validUrl = require('valid-url');\n  \n    if (validUrl.isUri(suspect)){\n        console.log('Looks like an URI');\n    } else {\n        console.log('Not a URI');\n    }\n```\n\nReplicates the functionality of Richard Sonnen <sonnen@richardsonnen.com> perl module :\nhttp://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm [full code here](http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git)\ninto a nodejs module. Initially translated practically line by line from perl. Subsequently rewritten to leverage [url](http://nodejs.org/api/url.html).\nIt passes all the original tests.\n\n## Description\n\n(copied from original perl module)\n\n> This module collects common URI validation routines to make input validation, and untainting easier and more readable.\n> All functions return an untainted value if the test passes, and undef if it fails. This means that you should always check for a defined status explicitly. Don't assume the return will be true.\n> The value to test is always the first (and often only) argument.\n> There are a number of other URI validation modules out there as well (see below.) This one focuses on being fast, lightweight, and relatively 'real-world'. i.e. it's good if you want to check user input, and don't need to parse out the URI/URL into chunks.\n> Right now the module focuses on HTTP URIs, since they're arguably the most common. If you have a specialized scheme you'd like to have supported, let me know.\n\n## Installation \n\n```\nnpm install valid-url\n```\n\n## Methods\n\n `\n isUri(value)\n `  \n **accepts** value as string to be checked as any protocol url  \n **returns** undefined if is not url, returns RFC 3986 url if valid\n\n `\n isHttpUri(value, allowHttps)\n `  \n **accepts** *value* as string to be checked as HTTP url, *allowHttps* as boolean to include https urls *(optional)*  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n\n `\n isHttpsUri(value)\n `  \n **accepts** value as string to be checked as HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n \n `\n isWebUri(value)\n `  \n **accepts** value as string to be checked as HTTP or HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n","readmeFilename":"README.md","_id":"valid-url@1.0.5","dist":{"shasum":"94cb07c02d61ad150ccef043ec2cd7e2fe26325d","tarball":"https://registry.npmjs.org/valid-url/-/valid-url-1.0.5.tgz","integrity":"sha512-tcrcugsweAwk7vS+85dCJ/qe0pXfckf6MTqzupkOh+o4zLU/jkTtToFhAgKdrHrtA0mYKBYy0K60Xa1Q5oyjQQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCFDpGO2dqcGluEQcET1l0UFleTMiP7bwVpeZ0QyoVfFgIhALqIU+/HfneZRFx9TBV+KElFArMLYdwq+wfr0C83MljU"}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"odysseas","email":"odysseas@tsatalos.com"},"maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"},{"name":"sagens","email":"zholudev.s@gmail.com"}],"directories":{}},"1.0.6":{"name":"valid-url","description":"URI validation functions","keywords":["url","validation","check","checker","pattern"],"version":"1.0.6","repository":{"url":"git://github.com/ogt/valid-url.git"},"main":"index.js","scripts":{"test":"make test"},"dependencies":{},"devDependencies":{"tap":"~0.4.3","jshint":"~2.1.4"},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nCommon url validation methods \n```\n    var validUrl = require('valid-url');\n  \n    if (validUrl.isUri(suspect)){\n        console.log('Looks like an URI');\n    } else {\n        console.log('Not a URI');\n    }\n```\n\nReplicates the functionality of Richard Sonnen <sonnen@richardsonnen.com> perl module :\nhttp://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm [full code here](http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git)\ninto a nodejs module. Initially translated practically line by line from perl. Subsequently rewritten to leverage [url](http://nodejs.org/api/url.html).\nIt passes all the original tests.\n\n## Description\n\n(copied from original perl module)\n\n> This module collects common URI validation routines to make input validation, and untainting easier and more readable.\n> All functions return an untainted value if the test passes, and undef if it fails. This means that you should always check for a defined status explicitly. Don't assume the return will be true.\n> The value to test is always the first (and often only) argument.\n> There are a number of other URI validation modules out there as well (see below.) This one focuses on being fast, lightweight, and relatively 'real-world'. i.e. it's good if you want to check user input, and don't need to parse out the URI/URL into chunks.\n> Right now the module focuses on HTTP URIs, since they're arguably the most common. If you have a specialized scheme you'd like to have supported, let me know.\n\n## Installation \n\n```\nnpm install valid-url\n```\n\n## Methods\n\n `\n isUri(value)\n `  \n **accepts** value as string to be checked as any protocol url  \n **returns** undefined if is not url, returns RFC 3986 url if valid\n\n `\n isHttpUri(value, allowHttps)\n `  \n **accepts** *value* as string to be checked as HTTP url, *allowHttps* as boolean to include https urls *(optional)*  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n\n `\n isHttpsUri(value)\n `  \n **accepts** value as string to be checked as HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n \n `\n isWebUri(value)\n `  \n **accepts** value as string to be checked as HTTP or HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n","readmeFilename":"README.md","_id":"valid-url@1.0.6","dist":{"shasum":"4af2cfef7a31bf10f8664187ae292d1c9a6fc442","tarball":"https://registry.npmjs.org/valid-url/-/valid-url-1.0.6.tgz","integrity":"sha512-Xgstjpj3fYhp29RgdkeNL8eqkfNoaja+XGBxeaobD3b3KJSjQKJCI1mvXK14OU+4BtD8kD3d9BOiGj6172cnXA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID58EGLtA3xhV0qI6JHe4eXq+2LFhpn41GDFViIMjQDDAiEAmklZSbyj7fKY7qGRGoAZ0HTm4HlBP0gTbb0iSd0SZPo="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"odysseas","email":"odysseas@tsatalos.com"},"maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"},{"name":"sagens","email":"zholudev.s@gmail.com"}],"directories":{}},"1.0.7":{"name":"valid-url","description":"URI validation functions","keywords":["url","validation","check","checker","pattern"],"version":"1.0.7","repository":{"url":"git://github.com/ogt/valid-url.git"},"main":"index.js","scripts":{"test":"make test"},"dependencies":{},"devDependencies":{"tap":"~0.4.3","jshint":"~2.1.4"},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nCommon url validation methods \n```\n    var validUrl = require('valid-url');\n  \n    if (validUrl.isUri(suspect)){\n        console.log('Looks like an URI');\n    } else {\n        console.log('Not a URI');\n    }\n```\n\nReplicates the functionality of Richard Sonnen <sonnen@richardsonnen.com> perl module :\nhttp://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm [full code here](http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git)\ninto a nodejs module. Translated practically line by line from perl. \nIt passes all the original tests.\n\n## Description\n\n(copied from original perl module)\n\n> This module collects common URI validation routines to make input validation, and untainting easier and more readable.\n> All functions return an untainted value if the test passes, and undef if it fails. This means that you should always check for a defined status explicitly. Don't assume the return will be true.\n> The value to test is always the first (and often only) argument.\n> There are a number of other URI validation modules out there as well (see below.) This one focuses on being fast, lightweight, and relatively 'real-world'. i.e. it's good if you want to check user input, and don't need to parse out the URI/URL into chunks.\n> Right now the module focuses on HTTP URIs, since they're arguably the most common. If you have a specialized scheme you'd like to have supported, let me know.\n\n## Installation \n\n```\nnpm install valid-url\n```\n\n## Methods\n```javascript\n/*\n * @Function isUri(value)\n *\n * @Synopsis  is the value a well-formed uri?\n * @Description  \n        Returns the untainted URI if the test value appears to be well-formed.  Note that\n        you may really want one of the more practical methods like is_http_uri or is_https_uri,\n        since the URI standard (RFC 3986) allows a lot of things you probably don't want.\n * @Arguments \n *   value  The potential URI to test.\n *\n * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n * @Notes \n        This function does not make any attempt to check whether the URI is accessible\n        or 'makes sense' in any meaningful way.  It just checks that it is formatted\n        correctly.\n *\n */\n\n\n/*\n * @Function isHttpUri(value)\n * @Synopsis   is the value a well-formed HTTP uri?\n * @Description  \n        Specialized version of isUri() that only likes http:// urls.  As a result, it can\n        also do a much more thorough job validating.  Also, unlike isUri() it is more\n        concerned with only allowing real-world URIs through.  Things like relative\n        hostnames are allowed by the standards, but probably aren't wise.  Conversely,\n        null paths aren't allowed per RFC 2616 (should be '/' instead), but are allowed\n        by this function.\n        \n        This function only works for fully-qualified URIs.  /bob.html won't work.  \n        See RFC 3986 for the appropriate method to turn a relative URI into an absolute \n        one given its context.\n        \n        Returns the untainted URI if the test value appears to be well-formed.\n        \n        Note that you probably want to either call this in combo with is_https_uri(). i.e.\n        \n        if(isHttpUri(uri) || isHttpsUri(uri)) console.log('Good');\n        \n        or use the convenience method isWebUri which is equivalent.\n\n * @Arguments \n *   value  The potential URI to test.\n *\n * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n * @Notes \n        This function does not make any attempt to check whether the URI is accessible\n        or 'makes sense' in any meaningful way.  It just checks that it is formatted\n        correctly.\n */\n \n\n\n/*\n * @Function isHttpsUri(value)\n * @Synopsis   is the value a well-formed HTTPS uri?\n * @Description  \n        See is_http_uri() for details.  This version only likes the https URI scheme.\n        Otherwise it's identical to is_http_uri()\n * @Arguments \n *   value  The potential URI to test.\n *\n * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n * @Notes \n        This function does not make any attempt to check whether the URI is accessible\n        or 'makes sense' in any meaningful way.  It just checks that it is formatted\n        correctly.\n */\n \n \n /*\n * @Function isWebUri(value)\n * @Synopsis   is the value a well-formed HTTP or HTTPS uri?\n * @Description  \n        This is just a convenience method that combines isHttpUri and isHttpsUri\n        to accept most common real-world URLs.\n * @Arguments \n *   value  The potential URI to test.\n *\n * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n * @Notes \n        This function does not make any attempt to check whether the URI is accessible\n        or 'makes sense' in any meaningful way.  It just checks that it is formatted\n        correctly.\n */\n \n","readmeFilename":"README.md","_id":"valid-url@1.0.7","dist":{"shasum":"452b83a91dd37d16fbbd899f6579c6662aad15fc","tarball":"https://registry.npmjs.org/valid-url/-/valid-url-1.0.7.tgz","integrity":"sha512-eyl8Tj3nuq8uBUzehnsq3MNtwOiB4ImHjoErMVxKlKjnEqhLQw45Uh43MaPJqCQkXOYwUStiouYBBDQfSGqXFQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCJJSvaRF8IM+RFFGi4lpOvav0CkEh/4SzIM8PRg4BSKQIgakGASGVlAUjnzTY3NjMmc8emrclfg8u7oA2f+su4UAo="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"odysseas","email":"odysseas@tsatalos.com"},"maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"},{"name":"sagens","email":"zholudev.s@gmail.com"}],"directories":{}},"1.0.8":{"name":"valid-url","description":"URI validation functions","keywords":["url","validation","check","checker","pattern"],"version":"1.0.8","repository":{"url":"git://github.com/ogt/valid-url.git"},"main":"index.js","scripts":{"test":"make test"},"dependencies":{},"devDependencies":{"tap":"~0.4.3","jshint":"~2.1.4"},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nCommon url validation methods \n```\n    var validUrl = require('valid-url');\n  \n    if (validUrl.isUri(suspect)){\n        console.log('Looks like an URI');\n    } else {\n        console.log('Not a URI');\n    }\n```\n\nReplicates the functionality of Richard Sonnen <sonnen@richardsonnen.com> perl module :\nhttp://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm [full code here](http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git)\ninto a nodejs module. Translated practically line by line from perl. \nIt passes all the original tests.\n\n## Description\n\n(copied from original perl module)\n\n> This module collects common URI validation routines to make input validation, and untainting easier and more readable.\n> All functions return an untainted value if the test passes, and undef if it fails. This means that you should always check for a defined status explicitly. Don't assume the return will be true.\n> The value to test is always the first (and often only) argument.\n> There are a number of other URI validation modules out there as well (see below.) This one focuses on being fast, lightweight, and relatively 'real-world'. i.e. it's good if you want to check user input, and don't need to parse out the URI/URL into chunks.\n> Right now the module focuses on HTTP URIs, since they're arguably the most common. If you have a specialized scheme you'd like to have supported, let me know.\n\n## Installation \n\n```\n    npm install valid-url\n```\n\n## Methods\n```javascript\n    /*\n     * @Function isUri(value)\n     *\n     * @Synopsis  is the value a well-formed uri?\n     * @Description  \n            Returns the untainted URI if the test value appears to be well-formed.  Note that\n            you may really want one of the more practical methods like is_http_uri or is_https_uri,\n            since the URI standard (RFC 3986) allows a lot of things you probably don't want.\n     * @Arguments \n     *   value  The potential URI to test.\n     *\n     * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n     * @Notes \n            This function does not make any attempt to check whether the URI is accessible\n            or 'makes sense' in any meaningful way.  It just checks that it is formatted\n            correctly.\n     *\n     */\n    \n    \n    /*\n     * @Function isHttpUri(value)\n     * @Synopsis   is the value a well-formed HTTP uri?\n     * @Description  \n            Specialized version of isUri() that only likes http:// urls.  As a result, it can\n            also do a much more thorough job validating.  Also, unlike isUri() it is more\n            concerned with only allowing real-world URIs through.  Things like relative\n            hostnames are allowed by the standards, but probably aren't wise.  Conversely,\n            null paths aren't allowed per RFC 2616 (should be '/' instead), but are allowed\n            by this function.\n            \n            This function only works for fully-qualified URIs.  /bob.html won't work.  \n            See RFC 3986 for the appropriate method to turn a relative URI into an absolute \n            one given its context.\n            \n            Returns the untainted URI if the test value appears to be well-formed.\n            \n            Note that you probably want to either call this in combo with is_https_uri(). i.e.\n            \n            if(isHttpUri(uri) || isHttpsUri(uri)) console.log('Good');\n            \n            or use the convenience method isWebUri which is equivalent.\n    \n     * @Arguments \n     *   value  The potential URI to test.\n     *\n     * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n     * @Notes \n            This function does not make any attempt to check whether the URI is accessible\n            or 'makes sense' in any meaningful way.  It just checks that it is formatted\n            correctly.\n     */\n     \n    \n    \n    /*\n     * @Function isHttpsUri(value)\n     * @Synopsis   is the value a well-formed HTTPS uri?\n     * @Description  \n            See is_http_uri() for details.  This version only likes the https URI scheme.\n            Otherwise it's identical to is_http_uri()\n     * @Arguments \n     *   value  The potential URI to test.\n     *\n     * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n     * @Notes \n            This function does not make any attempt to check whether the URI is accessible\n            or 'makes sense' in any meaningful way.  It just checks that it is formatted\n            correctly.\n     */\n     \n     \n     /*\n     * @Function isWebUri(value)\n     * @Synopsis   is the value a well-formed HTTP or HTTPS uri?\n     * @Description  \n            This is just a convenience method that combines isHttpUri and isHttpsUri\n            to accept most common real-world URLs.\n     * @Arguments \n     *   value  The potential URI to test.\n     *\n     * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n     * @Notes \n            This function does not make any attempt to check whether the URI is accessible\n            or 'makes sense' in any meaningful way.  It just checks that it is formatted\n            correctly.\n     */\n     \n```\n","readmeFilename":"README.md","_id":"valid-url@1.0.8","dist":{"shasum":"c1df89b6e11db978ab8842e3a83932f4b8abf594","tarball":"https://registry.npmjs.org/valid-url/-/valid-url-1.0.8.tgz","integrity":"sha512-CQaSmQkGONvKXE+VMheTzI121Oo/HHgKsA3XIXdGPG7X8pOQI6PnxgjueWUXdHCXDn62YaUOp+I0tQs77v9DQw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCk2N7AJW7xky5u/v2d50YhWx29FhSb+vfeUl4JofpCbQIhAIPYSjWn+KTWEIdnL6hdgscQe6OJW5uCwbqBs5bB9W9C"}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"odysseas","email":"odysseas@tsatalos.com"},"maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"},{"name":"sagens","email":"zholudev.s@gmail.com"}],"directories":{}},"1.0.9":{"name":"valid-url","description":"URI validation functions","keywords":["url","validation","check","checker","pattern"],"version":"1.0.9","repository":{"url":"git://github.com/ogt/valid-url.git"},"main":"index.js","scripts":{"test":"make test"},"dependencies":{},"devDependencies":{"tap":"~0.4.3","jshint":"~2.1.4"},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nCommon url validation methods \n```\n    var validUrl = require('valid-url');\n  \n    if (validUrl.isUri(suspect)){\n        console.log('Looks like an URI');\n    } else {\n        console.log('Not a URI');\n    }\n```\n\nReplicates the functionality of Richard Sonnen <sonnen@richardsonnen.com> perl module :\nhttp://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm [full code here](http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git)\ninto a nodejs module. Translated practically line by line from perl. \nIt passes all the original tests.\n\n## Description\n\n(copied from original perl module)\n\n> This module collects common URI validation routines to make input validation, and untainting easier and more readable.\n> All functions return an untainted value if the test passes, and undef if it fails. This means that you should always check for a defined status explicitly. Don't assume the return will be true.\n> The value to test is always the first (and often only) argument.\n> There are a number of other URI validation modules out there as well (see below.) This one focuses on being fast, lightweight, and relatively 'real-world'. i.e. it's good if you want to check user input, and don't need to parse out the URI/URL into chunks.\n> Right now the module focuses on HTTP URIs, since they're arguably the most common. If you have a specialized scheme you'd like to have supported, let me know.\n\n## Installation \n\n```\n    npm install valid-url\n```\n\n## Methods\n```javascript\n/*\n * @Function isUri(value)\n *\n * @Synopsis  is the value a well-formed uri?\n * @Description  \n        Returns the untainted URI if the test value appears to be well-formed.  Note that\n        you may really want one of the more practical methods like is_http_uri or is_https_uri,\n        since the URI standard (RFC 3986) allows a lot of things you probably don't want.\n * @Arguments \n *   value  The potential URI to test.\n *\n * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n * @Notes \n        This function does not make any attempt to check whether the URI is accessible\n        or 'makes sense' in any meaningful way.  It just checks that it is formatted\n        correctly.\n *\n */\n\n\n/*\n * @Function isHttpUri(value)\n * @Synopsis   is the value a well-formed HTTP uri?\n * @Description  \n        Specialized version of isUri() that only likes http:// urls.  As a result, it can\n        also do a much more thorough job validating.  Also, unlike isUri() it is more\n        concerned with only allowing real-world URIs through.  Things like relative\n        hostnames are allowed by the standards, but probably aren't wise.  Conversely,\n        null paths aren't allowed per RFC 2616 (should be '/' instead), but are allowed\n        by this function.\n        \n        This function only works for fully-qualified URIs.  /bob.html won't work.  \n        See RFC 3986 for the appropriate method to turn a relative URI into an absolute \n        one given its context.\n        \n        Returns the untainted URI if the test value appears to be well-formed.\n        \n        Note that you probably want to either call this in combo with is_https_uri(). i.e.\n        \n        if(isHttpUri(uri) || isHttpsUri(uri)) console.log('Good');\n        \n        or use the convenience method isWebUri which is equivalent.\n\n * @Arguments \n *   value  The potential URI to test.\n *\n * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n * @Notes \n        This function does not make any attempt to check whether the URI is accessible\n        or 'makes sense' in any meaningful way.  It just checks that it is formatted\n        correctly.\n */\n \n\n\n/*\n * @Function isHttpsUri(value)\n * @Synopsis   is the value a well-formed HTTPS uri?\n * @Description  \n        See is_http_uri() for details.  This version only likes the https URI scheme.\n        Otherwise it's identical to is_http_uri()\n * @Arguments \n *   value  The potential URI to test.\n *\n * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n * @Notes \n        This function does not make any attempt to check whether the URI is accessible\n        or 'makes sense' in any meaningful way.  It just checks that it is formatted\n        correctly.\n */\n \n \n /*\n * @Function isWebUri(value)\n * @Synopsis   is the value a well-formed HTTP or HTTPS uri?\n * @Description  \n        This is just a convenience method that combines isHttpUri and isHttpsUri\n        to accept most common real-world URLs.\n * @Arguments \n *   value  The potential URI to test.\n *\n * @Returns The untainted RFC 3986 URI on success, undefined on failure.\n * @Notes \n        This function does not make any attempt to check whether the URI is accessible\n        or 'makes sense' in any meaningful way.  It just checks that it is formatted\n        correctly.\n */\n \n```\n\n## See also \n\nRFC 3986, RFC 3966, RFC 4694, RFC 4759, RFC 4904\n\n","readmeFilename":"README.md","_id":"valid-url@1.0.9","dist":{"shasum":"1c14479b40f1397a75782f115e4086447433a200","tarball":"https://registry.npmjs.org/valid-url/-/valid-url-1.0.9.tgz","integrity":"sha512-QQDsV8OnSf5Uc30CKSwG9lnhMPe6exHtTXLRYX8uMwKENy640pU+2BgBL0LRbDh/eYRahNCS7aewCx0wf3NYVA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCcTF4uVAbLBMSIgGTodK/kTEP4lJAZatfX9iRkL36OJwIgNsXNSaO7vASKFij0JkRsV0ZqQGnOHpK/wxBBmxK2/gk="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"odysseas","email":"odysseas@tsatalos.com"},"maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"},{"name":"sagens","email":"zholudev.s@gmail.com"}],"directories":{}}},"readme":"URI validation functions\n==\n[![Build Status](https://travis-ci.org/ogt/valid-url.png)](https://travis-ci.org/ogt/valid-url)\n\n## Synopsis\n\nReplicates the functionality of  http://search.cpan.org/~sonnen/Data-Validate-URI-0.01/lib/Data/Validate/URI.pm\n (http://anonscm.debian.org/gitweb/?p=users/dom/libdata-validate-uri-perl.git )\ninto a nodejs module.\n\n#Description\n\n## Installation \n\n *fork it to install  \n *TODO: need add to npm\n\n## Usage\n \n `\n var validUrl = require('validUrl');\n `  \n\n## Methods\n\n `\n is_uri(value)\n `  \n **accepts** value as string to be checked as any protocol url  \n **returns** undefined if is not url, returns RFC 3986 url if valid\n\n `\n is_http_uri(value, allowHttps)\n `  \n **accepts** *value* as string to be checked as HTTP url, *allowHttps* as boolean to include https urls *(optional)*  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n\n `\n is_https_uri(value)\n `  \n **accepts** value as string to be checked as HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n \n `\n is_web_uri(value)\n `  \n **accepts** value as string to be checked as HTTP or HTTPS url  \n **returns** undefined if is not url, returns RFC 3986 url if valid  \n","maintainers":[{"name":"odysseas","email":"odysseas@tsatalos.com"},{"name":"sagens","email":"zholudev.s@gmail.com"}],"time":{"modified":"2022-06-28T08:24:01.500Z","created":"2013-07-29T05:38:26.084Z","1.0.1":"2013-07-29T05:38:27.597Z","1.0.2":"2013-07-30T16:33:29.041Z","1.0.3":"2013-07-30T16:49:49.233Z","1.0.4":"2013-07-30T22:41:37.367Z","1.0.5":"2013-07-30T23:37:23.091Z","1.0.6":"2013-07-31T01:35:45.533Z","1.0.7":"2013-07-31T02:10:42.465Z","1.0.8":"2013-07-31T03:11:31.259Z","1.0.9":"2013-07-31T03:27:38.576Z"},"repository":{"url":"git://github.com/ogt/valid-url.git"},"users":{"peteward44":true,"nichoth":true,"ppbntl19":true,"alex-cory":true,"princetoad":true,"garenyondem":true,"monkora":true,"wangnan0610":true,"jamesscaggs":true,"klombomb":true,"subhojit777":true,"firerishi":true,"renestl":true,"dm7":true,"veegee":true,"isenricho":true,"xrush":true,"hipperelement":true,"vboctor":true,"karnavpargi":true,"m0a":true,"sankalp404":true}}